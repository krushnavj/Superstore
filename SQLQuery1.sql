--1. Calculate Customer Lifetime Value (CLTV): Write a query to calculate the total sales and profit generated by each customer, as well as their average order value.
SELECT 
	o.customer_id,
	c.customer_name,
	SUM(o.sales) AS total_sales,
	SUM(o.profit) AS total_profit,
	AVG(o.sales) AS average_order_value
FROM orders$ o 
LEFT JOIN customers$ c ON c.customer_id = o.customer_id
GROUP BY o.customer_id, c.customer_name


--2. Rank sub-category by Sales within Each Category: Write a query to rank sub category by their total sales within each category.
SELECT
	p.category,
	p.sub_category,
	ROUND(SUM(o.sales),2) AS total_sales,
	RANK() OVER (PARTITION BY p.category ORDER BY SUM(o.sales) DESC) AS rank
FROM
	products$ p
LEFT JOIN
	orders$ o ON p.product_id = o.product_id
GROUP BY p.category, p.sub_category


--3. Identify Top Customers by Region: Write a query to find the top 3 customers by total profit in each region.
WITH RankedCustomers AS 
	(SELECT
		c.customer_id,
		c.customer_name,
		c.region,
		SUM(o.profit) AS total_profit,
		RANK() OVER (PARTITION BY c.region ORDER BY SUM(o.profit) DESC) AS profit_rank
	FROM
		orders$ o
	LEFT JOIN
		customers$ c ON o.customer_id = c.customer_id
	GROUP BY c.customer_id, c.customer_name, c.region)

SELECT *
FROM RankedCustomers
WHERE profit_rank <= 3


--4. Calculate Order Fulfillment Time: Write a query to calculate the average time taken to ship orders for each shipping mode.
SELECT
	ship_mode,
	AVG(DATEDIFF(day,order_date,ship_date)) AS time_taken
FROM orders$
GROUP BY ship_mode


--5. Identify Returned Products and Their Impact on Profit: Write a query to calculate the total loss in profit due to returned products.
WITH OrderwiseProfits AS
	(SELECT
		o.order_id,
		SUM(o.profit) AS total_profit
	FROM
		orders$ o
	INNER JOIN 
		returns$ r ON o.order_id = r.order_id
	GROUP BY o.order_id)
SELECT SUM(total_profit) AS total_profit_lost
FROM OrderwiseProfits

--OR--

SELECT
	SUM(o.profit) AS total_profit
FROM
	orders$ o
INNER JOIN 
	returns$ r ON o.order_id = r.order_id


--6. Find Customers with the Most Returned Orders: Write a query to identify customers with the highest number of returned orders.
WITH ReturnOrders AS
	(SELECT
		c.customer_id,
		c.customer_name,
		COUNT(o.order_id) AS number_of_orders_returned,
		DENSE_RANK() OVER (ORDER BY COUNT(o.order_id) DESC) AS rank
	FROM
		customers$ c
	LEFT JOIN orders$ o ON c.customer_id = o.customer_id
	LEFT JOIN returns$ r ON r.order_id = o.order_id
	GROUP BY c.customer_id, c.customer_name)
SELECT customer_id, customer_name, number_of_orders_returned
FROM ReturnOrders
WHERE rank = 1


--7. Classify Orders Based on Profit Margin: Write a query to classify each order into 'Loss' (if negative), 'Low' (if 10% or less), 'Medium' (if 30% or less), or 'High' (if more than 30%) profit margin based on the percentage of profit relative to sales.
SELECT
	order_id,
	sales,
	profit,
	(profit/sales) * 100 AS profit_margin,
	CASE
		WHEN (profit/sales) * 100 < 0 THEN 'Loss'
		WHEN (profit/sales) * 100 BETWEEN 0 and 10 THEN 'Low'
		WHEN (profit/sales) * 100 BETWEEN 10 and 30 THEN 'Medium'
		ELSE 'High'
	END AS profit_margin_category
FROM orders$


--8. Identify Underperforming Products: Write a query to identify products that are in the bottom 10% in terms of sales but have high return rates.
WITH TotalSales AS
		(SELECT TOP(10) PERCENT
			p.product_id,
			p.product_name,
			SUM(o.sales) AS total_sales
		FROM orders$ o
		JOIN products$ p ON p.product_id = o.product_id
		GROUP BY p.product_name, p.product_id
		ORDER BY total_sales), --order by works in CTE if TOP function is defined

ProductsReturned AS
	(SELECT 
		o.product_id,
		COUNT(o.product_id) AS num_of_products_returned
	FROM
		orders$ o
	RIGHT JOIN 
		returns$ r ON o.order_id = r.order_id
	GROUP BY o.product_id),

ProductsOrdered AS
	(SELECT 
		o.product_id,
		COUNT(o.product_id) AS num_of_products_ordered
	FROM
		orders$ o
	GROUP BY o.product_id)

SELECT
	TS.product_id,
	TS.product_name,
	TS.total_sales,
	PO.num_of_products_ordered,
	PR.num_of_products_returned,
	((PR.num_of_products_returned*1.0)/PO.num_of_products_ordered) AS return_rate
FROM 
	TotalSales TS
JOIN
	ProductsOrdered PO ON TS.product_id = PO.product_id
RIGHT JOIN 
	ProductsReturned PR ON PO.product_id = PR.product_id
WHERE 
	((PR.num_of_products_returned*1.0)/PO.num_of_products_ordered) > 0.5
ORDER BY 
	TS.product_id


--9. Sales Performance by Region and Segment: Write a query to analyze the sales performance by customer segment in each region.
SELECT
	c.region,
	c.segment,
	ROUND(SUM(o.sales),2) AS total_sales
FROM 
	customers$ c
	JOIN orders$ o ON c.customer_id = o.customer_id
GROUP BY 
	c.region, c.segment
ORDER BY 
	c.region, total_sales DESC


--10. Cross-Region Sales Analysis: Write a query to find customers who have placed orders in multiple regions.
SELECT 
	customer_id,
	COUNT(DISTINCT(region)) AS num_of_regions
FROM customers$
GROUP BY customer_id
HAVING COUNT(DISTINCT(region)) > 1
ORDER BY num_of_regions

